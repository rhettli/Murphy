local _M = {}

function _M:new(o)
    --o = o and o:new() or {}

    --print('self:==', _json_encode(o))
    --print('self:==', _json_encode(self))

    local uri = (_http_request(('path')))
    if __admin_psw and uri == '/admin/operator/' and _http_params('admin_psw') ~= __admin_psw then
        assert(false, 'admin_psw error')
    end

    -- 登录和登录提交接口不需要鉴权
    if not _in_array(uri, { '/admin/operator/', '/admin/operator/login' }) then
        local id = _http_cookie('i');
        local md5 = _http_cookie('m');
        print('base new...2', id, md5)
        if not _is_valid(id) or not _is_valid(md5) then
            _http_redirect('/admin/operator/?admin_psw=' .. (__admin_psw or ''), 302)
            assert(false, 'login again')
        else

            local op = __model.operator:findById(id)
            print('op find done:')
            print(op)
            if not op or op.password ~= md5 then
                _http_redirect('/admin/operator/?admin_psw=' .. (__admin_psw or ''), 302)
                assert(false, 'login again')
            end
            self._currentOperator = op
        end
    end

    if o then
        _merge_left(self, o:new())
    end

    return self
end

function _M:getConditions(value_name)
    local tb = { conditions = '' }
    local params = _http_params(value_name .. '[]')
    local bind = {}
    local filter = { eq = '=', gte = '>=', gt = '>', lt = '<', lte = '<=', neq = '!=', like = 'like' }
    if 'table' == type(params) then
        for i, v in pairs(params) do
            if _is_valid(v) then

                local prefix = _sub_ex('re', i, '_')
                i = _sub_ex('ne', i, '_')

                if filter[prefix] then
                    tb.conditions = tb.conditions .. ' ' .. i .. filter[prefix] .. ':' .. i .. ': and'
                    bind[i] = v
                else
                    print('conditions rule not match:', i, v)
                end
            end
        end
    end

    tb.conditions = _rtrim(tb.conditions, 'and')
    tb.bind = bind
    return tb
end

function _M:currentOperator()
    return self._currentOperator
end

function _M:assign(object, value_name)
    local params = _http_params(value_name .. '[]')

    --print('assign:===', _json_encode(params))

    assert(type(object) == 'table', 'params must model table')

    for i, v in pairs(params) do
        object[i] = v
    end
end

---render a volt file
function _M:render(tpl)
    if not self._view then
        self._view = require('oshine/woo_tpl@1.?:view'):new()
    end

    local ajax = _http_header('x-requested-with') == 'XMLHttpRequest' and 'ajax' or ''

    -- ========= render start ===========
    local tpl_dir = _DIR .. '/view/'

    _http_header('Content-Type', 'text/html;charset=utf-8')

    local f

    local store_key = tpl

    tpl = _str_replace(tpl, ".", "/") .. '.volt'

    store_key = ajax .. store_key
    f = _data_get(store_key)
    if not f then

        local view_file = tpl_dir .. tpl;
        print('vf:===', view_file)
        f = _cat(view_file, true)
        if not f then
            assert(false, 'view not exist:' .. view_file)
        end

        if '' == ajax and self.show_list ~= false then

            local parent_tpl = tpl_dir .. '/layouts/' .. _sub_ex('n', tpl, '/') .. '.volt';
            local admin_content = _cat(parent_tpl, true)
            --admin_content = _str_split(admin_content, '{{#content#}}')
            f = _str_replace(admin_content, "{{#content#}}", f, 1) -- admin_content[1] .. f .. admin_content[2]

            -- store to cache

        end

        _data_put(store_key, f)
    end

    self._view:render(f)
end

function _M:update()
    local id = _http_params('id')
    assert(_is_valid(id), 'no id')

    local model = __model[self.model_name]:findFirstById(id)
    if _is_valid(model) then
        --print('update valid ok:===', model.nickname)
        self:assign(model, self.model_name)

        self:_beforeUpdate(model)

        model:save()
    end

    return self:renderJSON()
end

function _M:create()
    local new_model = _new_model(self.model_name)

    local model = new_model:findFirstById(_http_params('id'))

    if _is_valid(model) then
        self:assign(model, self.model_name)

        self:_beforeCreate(model)

        model:save()
    end
    return self:renderJSON()
end

function _M:edit()
    local id = _http_params('id')
    assert(_is_valid(id), 'no id')

    local model = __model[self.model_name]:findFirstById(id)

    self:_beforeEdit(model)


    self:view(self.model_name, model):render('admin.' .. self.model_name .. '.edit')
end

--- suggest overwrite
function _M:_beforeCreate(model)
end
--- suggest overwrite
function _M:_beforeUpdate(model)
end
--- suggest overwrite
function _M:_beforeEdit(model)
end
--- suggest overwrite
function _M:_beforeIndex(model)
end

function _M:index()
    local res = {}
    if self.model_name and self.show_list ~= false then
        local cond = self:getConditions(self.model_name)

        local page = _http_params('page')
        page = page and page or 1
        res = __model[self.model_name]:findPagination(cond, page * 1, 30)

    end
    self:_beforeIndex(res)
    self:view(self.model_name .. 's', res):render("admin." .. self.model_name .. ".index")
end

function _M:view(name, data)
    if not self._view then
        self._view = require('oshine/woo_tpl@1.?:view'):new()
        self._view.view['admin_name'] = "woo 后台管理系统"
        self._view.view['operator_username'] = "admin"
    end

    self._view.view[name] = data

    print("====data====", self._view.view.admin_name)
    return self
end

return _extend(_M, "oshine/woo_mvc@1.?:controller")
