local class_member = {}

function class_member:new(o)
    o = o or {}
    return self
end

-- default time 30min
function class_member:createShortPsw()
    local psw = _http_params('psw')
    local sp = _http_params('sp')
    local sp_expire_at = _http_params('sp_expire_at')
    if _is_valid(sp_expire_at) then
        sp_expire_at = _time() + sp_expire_at * 60
    else
        sp_expire_at = _time() + 30 * 60
    end

    local member = self:currentMember()
    if member.password ~= psw then
        return self:renderJSON(nil, 'login password error', -1)
    end
    member.sp = sp
    member.sp_expire_at = sp_expire_at
    member:save()
    return self:renderJSON(nil, '')

end

function class_member:logout()
    local member = self:currentMember()

    member:logout()

    return self:renderJSON(nil, 'ok')
end

--- 刷新sid,只需要把sid过期时间延长即可，todo 限制频繁刷新
---
--- base:checkAuth() 已经鉴权sid是否有效，这里不需要鉴权
function class_member:refreshSid()

    local sid = _http_params('sid')

    _log('用户刷新sid', sid)

    member.sid = sid

    -- 刷新sid
    member:saveRds(true)

    return self:renderJSON({ sid = member.sid })
end

function class_member:login()
    -- 多设备登陆

    local email = _http_params('email')
    local psw = _http_params('psw')

    local device_no = _http_params('device_no')
    local platform = _http_params('platform')

    print('before login:===', email, psw, platform, device_no)

    --if platform and not in_array(platform, { 'windows', 'drawin', 'linux','web-chrome' ,'web-chrome' }) then
    --    return self:renderJSON(nil, 'login fail:[0p]', -1)
    --end

    _log('login before:', email, psw, platform, device_no)

    if not _is_valid(device_no) or #device_no < 8 then
        device_no = nil
    end

    if not _is_valid(email, psw) then
        return self:renderJSON(nil, __TI8()('en', I8_LOGIN_FAIL), -1)
    end

    local mod = _new_model('member')

    local member = mod:findFirstBy('email', email)
    if not member or member.password ~= _md5(psw) then
        return self:renderJSON(nil, __TI8()('en', I8_LOGIN_FAIL), -1)
    end

    member.last_at = _time()

    -- get current member id
    --local member_id = self:currentMemberId()
    local member_id = member.id

    member:generateSid()

    local json = member:toJson()
    local sid = member.sid

    -- 开启事务：begin
    member:begin(function(sql_handler)
        --first exec begin sql,and when function end ,will auto exec commit sql
        local device_id
        if device_no then
            local _Device = _new_model('device'):with(sql_handler)

            local device = _Device:findFirstBy('device_no', device_no)
            if _is_valid(device) then
                -- update last login time [更新这个设备的最后登录时间]
                device.last_at = _time()
                device.member_id = member_id
                device.sid = sid
                -- a platform can not be change after record to DB
                if device.platform ~= platform then
                    return self:renderJSON(nil, 'fail[03]', -1)
                end
                device:save()

                device_id = device.id
                -- update member's device_id
                member.device_id = device.id
            else
                _Device.sid = sid
                _Device.platform = platform
                _Device.device_no = device_no
                _Device.created_at = _time()
                _Device.member_id = member_id
                _Device.last_at = _time()
                _Device.ip = _http_ip()
                _Device.status = 1
                _Device:with(sql_handler):save()

                device_id = _Device.id
                -- update member's device_id
                member.device_id = _Device.id
            end
        end

        -- member发起事务，不需要调用with()方法
        member:save()

        -- 保存sid到redis缓存
        member:saveRds()

        -- 返回真，执行事务
        return true
    end)

    json.sid = sid
    return self:renderJSON(json)
end

return _extend(class_member, "controller.api.base")
