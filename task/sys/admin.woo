return {
    index = function()
        _ls(_DIR .. '/controller/admin', function(f, is_folder)
            f = _str_replace(f, '\\', '/')
            local res = _str_split(f, '/')
            --print(res[#res])
            local p_name = res[#res]
            p_name = _str_split(p_name, '.')[1]
            if res[#res] ~= 'operator.woo' then
                return
            end
            if not is_folder then
                local content = _file_get_contents(f)
                if _is_valid(content) then
                    local a_arr = _str_split(content, '\n')
                    local p = ''
                    local i = {}
                    local is_lock_item = ''
                    for _, v in pairs(a_arr) do
                        print('v:================', v)
                        if not _is_valid(p) then
                            print('p:================', p)
                            local r = _re_match(v, '-- *?\\[P:(.+?)\\]')
                            if _is_valid(r) then
                                print('===0', serialize(r))
                                p = r[2]

                                local op_permission = _new_model('operator_permission')
                                local omp = op_permission:findFirst({ conditions = 'p="' .. p_name .. '" and i is null' })
                                if not _is_valid(omp) then
                                    op_permission.p = p_name
                                    op_permission.name = p
                                    op_permission.created_at = _time()
                                    op_permission:save()
                                end
                            end
                        else
                            print('r:================')
                            local r = _re_match(v, '-- *?\\[I:(.+?)\\]')
                            if _is_valid(r) then
                                print('===1', serialize(r))
                                is_lock_item = r[2]
                            elseif _is_valid(is_lock_item) then
                                --function _M:update()
                                local r1 = _re_match(v, 'function.+?:(.+?)\\(')
                                print('is_lock_item:===', is_lock_item, v)
                                print(serialize(r1))

                                if _is_valid(r1) then
                                    print('===2', serialize(r1))

                                    local op_permission = _new_model('operator_permission')
                                    local omp = op_permission:findFirst({ conditions = 'p="' .. p_name .. '" and i="' .. r1[2] .. '"' })
                                    if not _is_valid(omp) then
                                        op_permission = _new_model('operator_permission')
                                        op_permission.p = p_name
                                        op_permission.i = r1[2]
                                        op_permission.name = is_lock_item
                                        op_permission.created_at = _time()
                                        op_permission:save()
                                    else
                                        print('omp2:')
                                    end
                                    is_lock_item = ''
                                end
                            end
                        end
                    end
                    print('=== end', p_name)
                end
            end
            --print(f, r)

        end)
    end
}
